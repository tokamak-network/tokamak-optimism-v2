name: Tokamak Optimism Publish (Nightly Version)

on: push

jobs:
  start-runners:
    name: Start Github Runners
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
      ec2-instance-id-1: ${{ steps.start-ec2-runner-1.outputs.ec2-instance-id }}
      ec2-instance-id-2: ${{ steps.start-ec2-runner-2.outputs.ec2-instance-id }}
      ec2-instance-id-3: ${{ steps.start-ec2-runner-3.outputs.ec2-instance-id }}
      ec2-instance-id-4: ${{ steps.start-ec2-runner-4.outputs.ec2-instance-id }}
      ec2-instance-id-5: ${{ steps.start-ec2-runner-5.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Start EC2 instances
      #   id: start-ec2-runner
      #   run: |
      #     echo "Start runner instances"
      #     aws ec2 start-instances --instance-ids i-05452cf489c6d6b49 i-06a469616207a7159 i-0226db863ffd5fb9c i-021e04ea87d9c475d i-05bd2a75cbfb4063d
      #     sleep 30

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-07c0bebc688a06c38
          ec2-instance-type: c6g.xlarge
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

      - name: Start EC2 runner-1
        id: start-ec2-runner-1
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.large
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

      - name: Start EC2 runner-2
        id: start-ec2-runner-2
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.large
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

      - name: Start EC2 runner-3
        id: start-ec2-runner-3
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.large
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

      - name: Start EC2 runner-4
        id: start-ec2-runner-4
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.large
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

      - name: Start EC2 runner-5
        id: start-ec2-runner-5
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.large
          subnet-id: subnet-072dee569d1bd6e7d
          security-group-id: sg-08c81d0af78c0859f

  l2geth:
    name: Publish L2Geth
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          whoami
          echo ::set-output name=VERSION::$(jq -r .version ./l2geth/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Publish L2Geth
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./l2geth/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-l2geth:test

  gas-oracle:
    name: Publish Gas Oracle
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./gas-oracle/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Publish Gas Oracle
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./gas-oracle/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-gas-oracle:test

  hardhat-node:
    name: Publish Hardhat Node
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./ops/docker/hardhat/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Publish Hardhat Node
        uses: docker/build-push-action@v2
        with:
          context: ./ops/docker/hardhat
          file: ./ops/docker/hardhat/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-hardhat:test

  message-relayer:
    name: Publish Message Relayer
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/message-relayer/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        run: |
          lscpu
          uname -r
          cat /etc/os-release
          docker build --build-arg TARGETARCH=arm64 --build-arg TARGETOS=linux -t onthertech/message-relayer:arm64 -f ./ops/docker/Dockerfile.packages --target message-relayer .
          docker push onthertech/message-relayer:arm64

  titan-message-relayer:
    name: Publish Titan Message Relayer
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/tokamak/message-relayer/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: titan-message-relayer
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-message-relayer:test

  fault-detector:
    name: Publish Fault Detector
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/fault-detector/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: fault-detector
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-fault-detector:test

  drippie-mon:
    name: Publish Drippie Monitor
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/drippie-mon/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: drippie-mon
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-drippie-mon:test

  data-transport-layer:
    name: Publish Data Transport Layer
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/data-transport-layer/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: data-transport-layer
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-data-transport-layer:test

  contracts:
    name: Publish Deployer
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/tokamak/contracts/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: titan-deployer
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-deployer:test

  proxyd:
    name: Publish proxyd
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./proxyd/package.json)
          echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./proxyd/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-proxyd:test
          build-args: |
            GITDATE=${{ steps.extractver.outputs.GITDATE }}
            GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
            GITVERSION=${{ steps.extractver.outputs.VERSION }}

  op-exporter:
    name: Publish op-exporter
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./op-exporter/package.json)
          echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./op-exporter/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-op-exporter:test
          build-args: |
            GITDATE=${{ steps.extractver.outputs.GITDATE }}
            GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
            GITVERSION=${{ steps.extractver.outputs.VERSION }}

  l2geth-exporter:
    name: Publish l2geth-exporter
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./l2geth-exporter/package.json)
          echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./l2geth-exporter/Dockerfile
          push: true
          platforms: linux/arm64
          tags: |
            onthertech/titan-l2geth-exporter:test
          build-args: |
            GITDATE=${{ steps.extractver.outputs.GITDATE }}
            GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
            GITVERSION=${{ steps.extractver.outputs.VERSION }}

  batch-submitter-service:
    name: Publish batch-submitter-service
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./batch-submitter/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./batch-submitter/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-batch-submitter-service:test

  indexer:
    name: Publish indexer
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./indexer/package.json)
          echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./indexer/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-indexer:test

  teleportr:
    name: Publish Teleportr
    runs-on: ARM64
    needs: start-runners
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./teleportr/package.json)
          echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./teleportr/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            onthertech/titan-teleportr:test
          build-args: |
            GITDATE=${{ steps.extractver.outputs.GITDATE }}
            GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
            GITVERSION=${{ steps.extractver.outputs.VERSION }}

  # stop-runners:
  #   name: Stop Github Runners
  #   runs-on: ubuntu-latest
  #   needs:

  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Stop EC2 instances
  #       id: Stop-ec2-runner
  #       run: |
  #         echo "Stop runner instances"
  #         aws ec2 stop-instances --instance-ids  i-05452cf489c6d6b49 i-06a469616207a7159 i-0226db863ffd5fb9c i-021e04ea87d9c475d i-05bd2a75cbfb4063d

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runners
      - l2geth
      - gas-oracle
      - hardhat-node
      - message-relayer
      - titan-message-relayer
      - fault-detector
      - drippie-mon
      - data-transport-layer
      - contracts
      - proxyd
      - op-exporter
      - l2geth-exporter
      - batch-submitter-service
      - indexer
      - teleportr
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

      - name: Stop EC2 runner 1
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id-1 }}

      - name: Stop EC2 runner 2
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id-2 }}

      - name: Stop EC2 runner 3
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id-3 }}

      - name: Stop EC2 runner 4
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id-4 }}

      - name: Stop EC2 runner 5
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id-5 }}
