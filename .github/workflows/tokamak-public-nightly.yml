name: Tokamak Optimism Publish (Nightly Version)

on:
  push:
    branches:
      - 'main'

jobs:
  start-runners:
    name: Checking EC runners info
    runs-on: ubuntu-latest
    needs:
      [
        start-runner-0,
        start-runner-1,
        start-runner-2,
        start-runner-3,
        start-runner-4,
        start-runner-5,
        start-runner-6,
        start-runner-7,
        start-runner-8,
        start-runner-9,
        start-runner-10,
      ]
    outputs:
      label-0: ${{ needs.start-runner-0.outputs.label }}
      label-1: ${{ needs.start-runner-1.outputs.label }}
      label-2: ${{ needs.start-runner-2.outputs.label }}
      label-3: ${{ needs.start-runner-3.outputs.label }}
      label-4: ${{ needs.start-runner-4.outputs.label }}
      label-5: ${{ needs.start-runner-5.outputs.label }}
      label-6: ${{ needs.start-runner-6.outputs.label }}
      label-7: ${{ needs.start-runner-7.outputs.label }}
      label-8: ${{ needs.start-runner-8.outputs.label }}
      label-9: ${{ needs.start-runner-9.outputs.label }}
      label-10: ${{ needs.start-runner-10.outputs.label }}
      ec2-instance-id-0: ${{ needs.start-runner-0.outputs.ec2-instance-id }}
      ec2-instance-id-1: ${{ needs.start-runner-1.outputs.ec2-instance-id }}
      ec2-instance-id-2: ${{ needs.start-runner-2.outputs.ec2-instance-id }}
      ec2-instance-id-3: ${{ needs.start-runner-3.outputs.ec2-instance-id }}
      ec2-instance-id-4: ${{ needs.start-runner-4.outputs.ec2-instance-id }}
      ec2-instance-id-5: ${{ needs.start-runner-5.outputs.ec2-instance-id }}
      ec2-instance-id-6: ${{ needs.start-runner-6.outputs.ec2-instance-id }}
      ec2-instance-id-7: ${{ needs.start-runner-7.outputs.ec2-instance-id }}
      ec2-instance-id-8: ${{ needs.start-runner-8.outputs.ec2-instance-id }}
      ec2-instance-id-9: ${{ needs.start-runner-9.outputs.ec2-instance-id }}
      ec2-instance-id-10: ${{ needs.start-runner-10.outputs.ec2-instance-id }}
    steps:
      - name: Runners status
        run: |
          echo "EC2 instances id:"
          echo ${{ needs.start-runner-0.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-1.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-2.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-3.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-4.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-5.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-6.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-7.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-8.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-9.outputs.ec2-instance-id }}
          echo ${{ needs.start-runner-10.outputs.ec2-instance-id }}
          echo "Runner labels:"
          echo ${{ needs.start-runner-0.outputs.label }}
          echo ${{ needs.start-runner-1.outputs.label }}
          echo ${{ needs.start-runner-2.outputs.label }}
          echo ${{ needs.start-runner-3.outputs.label }}
          echo ${{ needs.start-runner-4.outputs.label }}
          echo ${{ needs.start-runner-5.outputs.label }}
          echo ${{ needs.start-runner-6.outputs.label }}
          echo ${{ needs.start-runner-7.outputs.label }}
          echo ${{ needs.start-runner-8.outputs.label }}
          echo ${{ needs.start-runner-9.outputs.label }}
          echo ${{ needs.start-runner-10.outputs.label }}
          echo "Finished setup arm64 runners"

  start-runner-0:
    name: Start EC2 Runner 0
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-1:
    name: Start EC2 Runner 1
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-2:
    name: Start EC2 Runner 2
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-3:
    name: Start EC2 Runner 3
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-4:
    name: Start EC2 Runner 4
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-5:
    name: Start EC2 Runner 5
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-6:
    name: Start EC2 Runner 6
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-7:
    name: Start EC2 Runner 7
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-8:
    name: Start EC2 Runner 8
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-9:
    name: Start EC2 Runner 9
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  start-runner-10:
    name: Start EC2 Runner 10
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          ec2-image-id: ami-01bd9dc38789ab007
          ec2-instance-type: t4g.2xlarge
          subnet-id: subnet-013cf87174bb21c25
          security-group-id: sg-03165a21a3ba6e8b3

  l2geth:
    name: Publish L2Geth
    needs: start-runners
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, ARM64]
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}
      gitSHA: ${{ steps.extractver.outputs.GITSHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./l2geth/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Check Runner Architecture
        id: runner_info
        run: |
          ARCHITECTURE=$(uname -m)
          if [ "$ARCHITECTURE" = "x86_64" ]; then
            ARCHITECTURE="amd64"
          fi
          if [ "$ARCHITECTURE" = "aarch64" ]; then
            ARCHITECTURE="arm64"
          fi
          echo "::set-output name=architecture::$ARCHITECTURE"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      # - name: Build and push
      #   run: |
      #     docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./l2geth/Dockerfile -t onthertech/titan-l2geth:${{ steps.runner_info.outputs.architecture }} .
      #     docker image ls
      #     docker push onthertech/titan-l2geth:${{ steps.runner_info.outputs.architecture }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Publish L2Geth
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./l2geth/Dockerfile
          push: true
          tags: |
            onthertech/titan-l2geth:${{ steps.runner_info.outputs.architecture }}

  gas-oracle:
    name: Publish Gas Oracle
    needs: start-runners
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, ARM64]
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}
      gitSHA: ${{ steps.extractver.outputs.GITSHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./gas-oracle/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Check Runner Architecture
        id: runner_info
        run: |
          ARCHITECTURE=$(uname -m)
          if [ "$ARCHITECTURE" = "x86_64" ]; then
            ARCHITECTURE="amd64"
          fi
          if [ "$ARCHITECTURE" = "aarch64" ]; then
            ARCHITECTURE="arm64"
          fi
          echo "::set-output name=architecture::$ARCHITECTURE"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      # - name: Build and push
      #   run: |
      #     docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./gas-oracle/Dockerfile -t onthertech/titan-gas-oracle:${{ steps.runner_info.outputs.architecture }} .
      #     docker image ls
      #     docker push onthertech/titan-gas-oracle:${{ steps.runner_info.outputs.architecture }}

      - name: Publish Gas Oracle
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./gas-oracle/Dockerfile
          push: true
          tags: |
            onthertech/titan-gas-oracle:${{ steps.runner_info.outputs.architecture }}

  hardhat-node:
    name: Publish Hardhat Node
    needs: start-runners
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, ARM64]
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}
      gitSHA: ${{ steps.extractver.outputs.GITSHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./ops/docker/hardhat/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Check Runner Architecture
        id: runner_info
        run: |
          ARCHITECTURE=$(uname -m)
          if [ "$ARCHITECTURE" = "x86_64" ]; then
            ARCHITECTURE="amd64"
          fi
          if [ "$ARCHITECTURE" = "aarch64" ]; then
            ARCHITECTURE="arm64"
          fi
          echo "::set-output name=architecture::$ARCHITECTURE"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      # - name: Build and push
      #   run: |
      #     docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./ops/docker/hardhat/Dockerfile -t onthertech/titan-hardhat:${{ steps.runner_info.outputs.architecture }} ./ops/docker/hardhat
      #     docker image ls
      #     docker push onthertech/titan-hardhat:${{ steps.runner_info.outputs.architecture }}

      - name: Publish Hardhat Node
        uses: docker/build-push-action@v2
        with:
          context: ./ops/docker/hardhat
          file: ./ops/docker/hardhat/Dockerfile
          push: true
          tags: |
            onthertech/titan-hardhat:${{ steps.runner_info.outputs.architecture }}

  message-relayer:
    name: Publish Message Relayer
    needs: start-runners
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, ARM64]
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}
      gitSHA: ${{ steps.extractver.outputs.GITSHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/message-relayer/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Check Runner Architecture
        id: runner_info
        run: |
          ARCHITECTURE=$(uname -m)
          if [ "$ARCHITECTURE" = "x86_64" ]; then
            ARCHITECTURE="amd64"
          fi
          if [ "$ARCHITECTURE" = "aarch64" ]; then
            ARCHITECTURE="arm64"
          fi
          echo "::set-output name=architecture::$ARCHITECTURE"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      # - name: Build and push
      #   run: |
      #     docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target message-relayer -f ./ops/docker/Dockerfile.packages -t onthertech/optimism.message-relayer:${{ steps.runner_info.outputs.architecture }} .
      #     docker image ls
      #     docker push onthertech/optimism.message-relayer:${{ steps.runner_info.outputs.architecture }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: message-relayer
          push: true
          tags: |
            onthertech/optimism.message-relayer:${{ steps.runner_info.outputs.architecture }}

  titan-message-relayer:
    name: Publish Titan Message Relayer
    needs: start-runners
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest, ARM64]
    outputs:
      newVersion: ${{ steps.extractver.outputs.VERSION }}
      gitSHA: ${{ steps.extractver.outputs.GITSHA }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version
        id: extractver
        run: |
          echo ::set-output name=VERSION::$(jq -r .version ./packages/tokamak/message-relayer/package.json)
          echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

      - name: Check Runner Architecture
        id: runner_info
        run: |
          ARCHITECTURE=$(uname -m)
          if [ "$ARCHITECTURE" = "x86_64" ]; then
            ARCHITECTURE="amd64"
          fi
          if [ "$ARCHITECTURE" = "aarch64" ]; then
            ARCHITECTURE="arm64"
          fi
          echo "::set-output name=architecture::$ARCHITECTURE"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      # - name: Build and push
      #   run: |
      #     docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target titan-message-relayer -f ./ops/docker/Dockerfile.packages -t onthertech/titan-message-relayer:${{ steps.runner_info.outputs.architecture }} .
      #     docker image ls
      #     docker push onthertech/titan-message-relayer:${{ steps.runner_info.outputs.architecture }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./ops/docker/Dockerfile.packages
          target: titan-message-relayer
          push: true
          tags: |
            onthertech/titan-message-relayer:${{ steps.runner_info.outputs.architecture }}

  # fault-detector:
  #   name: Publish Fault Detector
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./packages/fault-detector/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target fault-detector -f ./ops/docker/Dockerfile.packages -t onthertech/titan-fault-detector:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-fault-detector:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: fault-detector
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-fault-detector:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-fault-detector:nightly
  #     #       onthertech/titan-fault-detector:nightly-${{ steps.extractver.outputs.VERSION }}

  # drippie-mon:
  #   name: Publish Drippie Monitor
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./packages/drippie-mon/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target drippie-mon -f ./ops/docker/Dockerfile.packages -t onthertech/titan-drippie-mon:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-drippie-mon:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: drippie-mon
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-drippie-mon:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-drippie-mon:nightly
  #     #       onthertech/titan-drippie-mon:nightly-${{ steps.extractver.outputs.VERSION }}

  # data-transport-layer:
  #   name: Publish Data Transport Layer
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./packages/data-transport-layer/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target data-transport-layer -f ./ops/docker/Dockerfile.packages -t onthertech/titan-data-transport-layer:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-data-transport-layer:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: data-transport-layer
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-data-transport-layer:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-data-transport-layer:nightly
  #     #       onthertech/titan-data-transport-layer:nightly-${{ steps.extractver.outputs.VERSION }}

  # contracts:
  #   name: Publish Deployer
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./packages/tokamak/contracts/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target titan-deployer -f ./ops/docker/Dockerfile.packages -t onthertech/titan-deployer:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-deployer:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: titan-deployer
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-deployer:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-deployer:nightly
  #     #       onthertech/titan-deployer:nightly-${{ steps.extractver.outputs.VERSION }}

  # integration_tests:
  #   name: Publish Integration tests
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./integration-tests/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target integration-tests -f ./ops/docker/Dockerfile.packages -t onthertech/titan-integration-tests:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-integration-tests:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: integration-tests
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-integration-tests:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-integration-tests:nightly
  #     #       onthertech/titan-integration-tests:nightly-${{ steps.extractver.outputs.VERSION }}

  # replica-healthcheck:
  #   name: Publish Replica Healthcheck
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./packages/replica-healthcheck/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux --target replica-healthcheck -f ./ops/docker/Dockerfile.packages -t onthertech/titan-replica-healthcheck:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-replica-healthcheck:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./ops/docker/Dockerfile.packages
  #     #     target: replica-healthcheck
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-replica-healthcheck:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-replica-healthcheck:nightly
  #     #       onthertech/titan-replica-healthcheck:nightly-${{ steps.extractver.outputs.VERSION }}

  # proxyd:
  #   name: Publish proxyd
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./proxyd/package.json)
  #         echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg GITVERSION=${{ steps.extractver.outputs.VERSION }} --build-arg GITCOMMIT=${{ steps.extractver.outputs.GITSHA }} --build-arg GITDATE=${{ steps.extractver.outputs.GITDATE }} --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./proxyd/Dockerfile -t onthertech/titan-proxyd:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-proxyd:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./proxyd/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-proxyd:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-proxyd:nightly
  #     #       onthertech/titan-proxyd:nightly-${{ steps.extractver.outputs.VERSION }}
  #     #     build-args: |
  #     #       GITDATE=${{ steps.extractver.outputs.GITDATE }}
  #     #       GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
  #     #       GITVERSION=${{ steps.extractver.outputs.VERSION }}

  # op-exporter:
  #   name: Publish op-exporter
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./op-exporter/package.json)
  #         echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg GITVERSION=${{ steps.extractver.outputs.VERSION }} --build-arg GITCOMMIT=${{ steps.extractver.outputs.GITSHA }} --build-arg GITDATE=${{ steps.extractver.outputs.GITDATE }} --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./op-exporter/Dockerfile -t onthertech/titan-op-exporter:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-op-exporter:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./op-exporter/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-op-exporter:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-op-exporter:nightly
  #     #       onthertech/titan-op-exporter:nightly-${{ steps.extractver.outputs.VERSION }}
  #     #     build-args: |
  #     #       GITDATE=${{ steps.extractver.outputs.GITDATE }}
  #     #       GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
  #     #       GITVERSION=${{ steps.extractver.outputs.VERSION }}

  # l2geth-exporter:
  #   name: Publish l2geth-exporter
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./l2geth-exporter/package.json)
  #         echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg GITVERSION=${{ steps.extractver.outputs.VERSION }} --build-arg GITCOMMIT=${{ steps.extractver.outputs.GITSHA }} --build-arg GITDATE=${{ steps.extractver.outputs.GITDATE }} --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./l2geth-exporter/Dockerfile -t onthertech/titan-l2geth-exporter:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-l2geth-exporter:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./l2geth-exporter/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-l2geth-exporter:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-l2geth-exporter:nightly
  #     #       onthertech/titan-l2geth-exporter:nightly-${{ steps.extractver.outputs.VERSION }}
  #     #     build-args: |
  #     #       GITDATE=${{ steps.extractver.outputs.GITDATE }}
  #     #       GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
  #     #       GITVERSION=${{ steps.extractver.outputs.VERSION }}

  # batch-submitter-service:
  #   name: Publish batch-submitter-service
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./batch-submitter/package.json)
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./batch-submitter/Dockerfile -t onthertech/titan-batch-submitter-service:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-batch-submitter-service:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./batch-submitter/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-batch-submitter-service:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-batch-submitter-service:nightly
  #     #       onthertech/titan-batch-submitter-service:nightly-${{ steps.extractver.outputs.VERSION }}

  # indexer:
  #   name: Publish indexer
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./indexer/package.json)
  #         echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg GITVERSION=${{ steps.extractver.outputs.VERSION }} --build-arg GITCOMMIT=${{ steps.extractver.outputs.GITSHA }} --build-arg GITDATE=${{ steps.extractver.outputs.GITDATE }} --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./indexer/Dockerfile -t onthertech/titan-indexer:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-indexer:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./indexer/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-indexer:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-indexer:nightly
  #     #       onthertech/titan-indexer:nightly-${{ steps.extractver.outputs.VERSION }}
  #     #     build-args: |
  #     #       GITDATE=${{ steps.extractver.outputs.GITDATE }}
  #     #       GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
  #     #       GITVERSION=${{ steps.extractver.outputs.VERSION }}

  # teleportr:
  #   name: Publish Teleportr
  #   needs: start-runners
  #   runs-on: ${{ matrix.runner }}
  #   strategy:
  #     matrix:
  #       runner: [ubuntu-latest, ARM64]
  #   outputs:
  #     newVersion: ${{ steps.extractver.outputs.VERSION }}
  #     gitSHA: ${{ steps.extractver.outputs.GITSHA }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

  #     - name: Get version
  #       id: extractver
  #       run: |
  #         echo ::set-output name=VERSION::$(jq -r .version ./teleportr/package.json)
  #         echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)"
  #         echo ::set-output name=GITSHA::$(echo ${GITHUB_SHA} | cut -c1-8)

  #     - name: Check Runner Architecture
  #       id: runner_info
  #       run: |
  #         ARCHITECTURE=$(uname -m)
  #         if [ "$ARCHITECTURE" = "x86_64" ]; then
  #           ARCHITECTURE="amd64"
  #         fi
  #         if [ "$ARCHITECTURE" = "aarch64" ]; then
  #           ARCHITECTURE="arm64"
  #         fi
  #         echo "::set-output name=architecture::$ARCHITECTURE"

  #     - name: Build and push
  #       run: |
  #         docker build --build-arg GITVERSION=${{ steps.extractver.outputs.VERSION }} --build-arg GITCOMMIT=${{ steps.extractver.outputs.GITSHA }} --build-arg GITDATE=${{ steps.extractver.outputs.GITDATE }} --build-arg TARGETARCH=${{ steps.runner_info.outputs.architecture }} --build-arg TARGETOS=linux -f ./teleportr/Dockerfile -t onthertech/titan-teleportr:${{ steps.runner_info.outputs.architecture }} .
  #         docker image ls
  #         docker push onthertech/titan-teleportr:${{ steps.runner_info.outputs.architecture }}

  #     # - name: Build and push
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     file: ./teleportr/Dockerfile
  #     #     push: true
  #     #     tags: |
  #     #       onthertech/titan-teleportr:${{ steps.extractver.outputs.GITSHA }}
  #     #       onthertech/titan-teleportr:nightly
  #     #       onthertech/titan-teleportr:nightly-${{ steps.extractver.outputs.VERSION }}
  #     #     build-args: |
  #     #       GITDATE=${{ steps.extractver.outputs.GITDATE }}
  #     #       GITCOMMIT=${{ steps.extractver.outputs.GITSHA }}
  #     #       GITVERSION=${{ steps.extractver.outputs.VERSION }}

  multi-arch-image:
    name: Build multi-arch images
    needs:
      - l2geth
      - gas-oracle
      - hardhat-node
      - message-relayer
      - titan-message-relayer
      # - fault-detector
      # - drippie-mon
      # - data-transport-layer
      # - integration_tests
      # - replica-healthcheck
      # - contracts
      # - proxyd
      # - op-exporter
      # - l2geth-exporter
      # - batch-submitter-service
      # - indexer
      # - teleportr
    runs-on: ubuntu-latest
    steps:
      - name: Setup manifest-tool
        run: |
          wget https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          chmod +x manifest-tool-linux-amd64
          sudo mv manifest-tool-linux-amd64 /usr/local/bin/manifest-tool

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN_SECRET }}

      - name: Build and Push Docker Image
        run: |
          echo "Building onthertech/titan-l2geth:nightly"
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth:ARCH --target onthertech/titan-l2geth:nightly-${{ needs.l2geth.outputs.newVersion}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth:ARCH --target onthertech/titan-l2geth:nightly-${{ needs.l2geth.outputs.gitSHA}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth:ARCH --target onthertech/titan-l2geth:nightly
          echo "Finished!"

          echo "Building onthertech/titan-gas-oracle:nightly"
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-gas-oracle:ARCH --target onthertech/titan-gas-oracle:nightly-${{ needs.gas-oracle.outputs.newVersion}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-gas-oracle:ARCH --target onthertech/titan-gas-oracle:nightly-${{ needs.gas-oracle.outputs.gitSHA}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-gas-oracle:ARCH --target onthertech/titan-gas-oracle:nightly
          echo "Finished!"

          echo "Building onthertech/titan-hardhat:nightly"
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-hardhat:ARCH --target onthertech/titan-hardhat:nightly-${{ needs.hardhat-node.outputs.newVersion}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-hardhat:ARCH --target onthertech/titan-hardhat:nightly-${{ needs.hardhat-node.outputs.gitSHA}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-hardhat:ARCH --target onthertech/titan-hardhat:nightly
          echo "Finished!"

          echo "Building onthertech/optimism.message-relayer:nightly"
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/optimism.message-relayer:ARCH --target onthertech/optimism.message-relayer:nightly-${{ needs.message-relayer.outputs.newVersion}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/optimism.message-relayer:ARCH --target onthertech/optimism.message-relayer:nightly-${{ needs.message-relayer.outputs.gitSHA}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/optimism.message-relayer:ARCH --target onthertech/optimism.message-relayer:nightly
          echo "Finished!"

          echo "Building onthertech/titan-message-relayer:nightly"
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-message-relayer:ARCH --target onthertech/titan-message-relayer:nightly-${{ needs.titan-message-relayer.outputs.newVersion}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-message-relayer:ARCH --target onthertech/titan-message-relayer:nightly-${{ needs.titan-message-relayer.outputs.gitSHA}}
          manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-message-relayer:ARCH --target onthertech/titan-message-relayer:nightly
          echo "Finished!"

          # echo "Building onthertech/titan-fault-detector:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-fault-detector:ARCH --target onthertech/titan-fault-detector:nightly-${{ needs.fault-detector.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-fault-detector:ARCH --target onthertech/titan-fault-detector:nightly-${{ needs.fault-detector.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-fault-detector:ARCH --target onthertech/titan-fault-detector:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-drippie-mon:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-drippie-mon:ARCH --target onthertech/titan-drippie-mon:nightly-${{ needs.drippie-mon.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-drippie-mon:ARCH --target onthertech/titan-drippie-mon:nightly-${{ needs.drippie-mon.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-drippie-mon:ARCH --target onthertech/titan-drippie-mon:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-data-transport-layer:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-data-transport-layer:ARCH --target onthertech/titan-data-transport-layer:nightly-${{ needs.data-transport-layer.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-data-transport-layer:ARCH --target onthertech/titan-data-transport-layer:nightly-${{ needs.data-transport-layer.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-data-transport-layer:ARCH --target onthertech/titan-data-transport-layer:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-deployer:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-deployer:ARCH --target onthertech/titan-deployer:nightly-${{ needs.contracts.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-deployer:ARCH --target onthertech/titan-deployer:nightly-${{ needs.contracts.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-deployer:ARCH --target onthertech/titan-deployer:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-integration-tests:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-integration-tests:ARCH --target onthertech/titan-integration-tests:nightly-${{ needs.integration-tests.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-integration-tests:ARCH --target onthertech/titan-integration-tests:nightly-${{ needs.integration-tests.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-integration-tests:ARCH --target onthertech/titan-integration-tests:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-replica-healthcheck:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-replica-healthcheck:ARCH --target onthertech/titan-replica-healthcheck:nightly-${{ needs.replica-healthcheck.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-replica-healthcheck:ARCH --target onthertech/titan-replica-healthcheck:nightly-${{ needs.replica-healthcheck.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-replica-healthcheck:ARCH --target onthertech/titan-replica-healthcheck:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-proxyd:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-proxyd:ARCH --target onthertech/titan-proxyd:nightly-${{ needs.proxyd.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-proxyd:ARCH --target onthertech/titan-proxyd:nightly-${{ needs.proxyd.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-proxyd:ARCH --target onthertech/titan-proxyd:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-op-exporter:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-op-exporter:ARCH --target onthertech/titan-op-exporter:nightly-${{ needs.op-exporter.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-op-exporter:ARCH --target onthertech/titan-op-exporter:nightly-${{ needs.op-exporter.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-op-exporter:ARCH --target onthertech/titan-op-exporter:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-l2geth-exporter:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth-exporter:ARCH --target onthertech/titan-l2geth-exporter:nightly-${{ needs.l2geth-exporter.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth-exporter:ARCH --target onthertech/titan-l2geth-exporter:nightly-${{ needs.l2geth-exporter.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-l2geth-exporter:ARCH --target onthertech/titan-l2geth-exporter:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-batch-submitter-service:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-batch-submitter-service:ARCH --target onthertech/titan-batch-submitter-service:nightly-${{ needs.batch-submitter-service.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-batch-submitter-service:ARCH --target onthertech/titan-batch-submitter-service:nightly-${{ needs.batch-submitter-service.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-batch-submitter-service:ARCH --target onthertech/titan-batch-submitter-service:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-indexer:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-indexer:ARCH --target onthertech/titan-indexer:nightly-${{ needs.indexer.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-indexer:ARCH --target onthertech/titan-indexer:nightly-${{ needs.indexer.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-indexer:ARCH --target onthertech/titan-indexer:nightly
          # echo "Finished!"

          # echo "Building onthertech/titan-teleportr:nightly"
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-teleportr:ARCH --target onthertech/titan-teleportr:nightly-${{ needs.teleportr.outputs.newVersion}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-teleportr:ARCH --target onthertech/titan-teleportr:nightly-${{ needs.teleportr.outputs.gitSHA}}
          # manifest-tool push from-args --platforms linux/amd64,linux/arm64 --template onthertech/titan-teleportr:ARCH --target onthertech/titan-teleportr:nightly
          # echo "Finished!"

  stop-runner:
    name: Stop self-hosted EC2 runners
    needs:
      - start-runners
      - l2geth
      - gas-oracle
      - hardhat-node
      - message-relayer
      - titan-message-relayer
      # - fault-detector
      # - drippie-mon
      # - data-transport-layer
      # - contracts
      # - integration_tests
      # - replica-healthcheck
      # - proxyd
      # - op-exporter
      # - l2geth-exporter
      # - batch-submitter-service
      # - indexer
      # - teleportr
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Stop EC2 runner 0
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-0 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-0 }}

      - name: Stop EC2 runner 1
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-1 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-1 }}

      - name: Stop EC2 runner 2
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-2 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-2 }}

      - name: Stop EC2 runner 3
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-3 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-3 }}

      - name: Stop EC2 runner 4
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-4 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-4 }}

      - name: Stop EC2 runner 5
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-5 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-5 }}

      - name: Stop EC2 runner 6
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-6 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-6 }}

      - name: Stop EC2 runner 7
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-7 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-7 }}

      - name: Stop EC2 runner 8
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-8 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-8 }}

      - name: Stop EC2 runner 9
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-9 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-9 }}

      - name: Stop EC2 runner 10
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
          label: ${{ needs.start-runners.outputs.label-10 }}
          ec2-instance-id: ${{ needs.start-runners.outputs.ec2-instance-id-10 }}

  update-kustomize:
    name: Update image version in kustomize manifest file
    needs:
      - multi-arch-image
    runs-on: ubuntu-latest

    steps:
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: tokamak-network/tokamak-titan-infra
          ref: main
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
          path: tokamak-titan-infra

      - name: Update l2geth Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-l2geth:nightly-${{ needs.l2geth.outputs.newVersion }}

      - name: Update titan-message-relayer Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-message-relayer:nightly-${{ needs.titan-message-relayer.outputs.newVersion }}

      - name: Update data-transport-layer Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-data-transport-layer:nightly-${{ needs.data-transport-layer.outputs.newVersion }}

      - name: Update batch-submitter-service Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-batch-submitter-service:nightly-${{ needs.batch-submitter-service.outputs.newVersion }}

      - name: Update proxyd Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-proxyd:nightly-${{ needs.proxyd.outputs.newVersion }}

      - name: Update gas-oracle Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          kustomize edit set image onthertech/titan-gas-oracle:nightly-${{ needs.gas-oracle.outputs.newVersion }}

      - name: Show updated Kubernetes resources
        run: |
          cd tokamak-titan-infra/tokamak-optimism/kustomize/overlays/aws/goerli-nightly
          cat kustomization.yaml

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          github_token: ${{ secrets.BOT_ACCESS_TOKEN }}
          message: '[AUTO] Update tokamak-optimism images tag for nightly'
          cwd: 'tokamak-titan-infra/'
