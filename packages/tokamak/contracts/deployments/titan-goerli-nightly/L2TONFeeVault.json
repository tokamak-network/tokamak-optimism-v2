{
  "address": "0x5456a5dCeFCd57bF1786C090aED8975FdAbF3379",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "TransferOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UpdateGasPriceOracleAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxPriceRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinPriceRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UpdatePriceRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "WithdrawTON",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_WITHDRAWAL_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_txData",
          "type": "bytes"
        }
      ],
      "name": "getL1TonFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_feeWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2TonAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2TonAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPriceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPriceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tonFeeTokenUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasPriceOracleAddress",
          "type": "address"
        }
      ],
      "name": "updateGasPriceOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPriceRatio",
          "type": "uint256"
        }
      ],
      "name": "updateMaxPriceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minPriceRatio",
          "type": "uint256"
        }
      ],
      "name": "updateMinPriceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketPriceRatio",
          "type": "uint256"
        }
      ],
      "name": "updatePriceRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTON",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x70f3aa099b77513447f99f51f12fffe3a910b287db178fe982005feecd555b8f",
  "receipt": {
    "to": null,
    "from": "0xff5123d22088ecbf74C8A56E1F538bECDcaCF544",
    "contractAddress": "0x5456a5dCeFCd57bF1786C090aED8975FdAbF3379",
    "transactionIndex": 0,
    "gasUsed": "1146778",
    "logsBloom": "0x
    "blockHash": "0x95f219bb53ab35c45978ccb7ffe88f2c325d1c8a7e7f083f7310d9670da6fec7",
    "transactionHash": "0x70f3aa099b77513447f99f51f12fffe3a910b287db178fe982005feecd555b8f",
    "logs": [],
    "blockNumber": 1808,
    "cumulativeGasUsed": "1146778",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f31154f73000dd85d3da7c86cdfdc0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UpdateGasPriceOracleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxPriceRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UpdateMinPriceRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UpdatePriceRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WithdrawTON\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAWAL_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_txData\",\"type\":\"bytes\"}],\"name\":\"getL1TonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2TonAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPriceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tonFeeTokenUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasPriceOracleAddress\",\"type\":\"address\"}],\"name\":\"updateGasPriceOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceRatio\",\"type\":\"uint256\"}],\"name\":\"updateMaxPriceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPriceRatio\",\"type\":\"uint256\"}],\"name\":\"updateMinPriceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketPriceRatio\",\"type\":\"uint256\"}],\"name\":\"updatePriceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getL1TonFee(bytes)\":{\"params\":{\"_txData\":\"the data payload\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"new owner address\"}},\"updateGasPriceOracleAddress(address)\":{\"params\":{\"_gasPriceOracleAddress\":\"gas oracle address\"}},\"updateMaxPriceRatio(uint256)\":{\"params\":{\"_maxPriceRatio\":\"the maximum price ratio of ETH and TON\"}},\"updateMinPriceRatio(uint256)\":{\"params\":{\"_minPriceRatio\":\"the minimum price ratio of ETH and TON\"}},\"updatePriceRatio(uint256,uint256)\":{\"params\":{\"_marketPriceRatio\":\"tha market price ratio of ETH and TON\",\"_priceRatio\":\"the price ratio of ETH and TON\"}}},\"title\":\"TON_FeeVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getL1TonFee(bytes)\":{\"notice\":\"Get L1 Ton fee for fee estimation\"},\"initialize(address,address)\":{\"notice\":\"Initialize feeWallet and l2TonAddress.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"notice\":\"transfer ownership\"},\"updateGasPriceOracleAddress(address)\":{\"notice\":\"Update the gas oracle address\"},\"updateMaxPriceRatio(uint256)\":{\"notice\":\"Update the maximum price ratio of ETH and TON\"},\"updateMinPriceRatio(uint256)\":{\"notice\":\"Update the minimum price ratio of ETH and TON\"},\"updatePriceRatio(uint256,uint256)\":{\"notice\":\"Update the price ratio of ETH and TON\"},\"withdrawTON()\":{\"notice\":\"withdraw TON tokens to l1 fee wallet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/fee-token/TON_FeeVault.sol\":\"TON_FeeVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xaf583f9537cf446d08c33909e52313d349a831f6b88f20361b76474e40b4c36f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/L1/messaging/IL1ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IL1ERC20Bridge\\n */\\ninterface IL1ERC20Bridge {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event ERC20DepositInitiated(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20WithdrawalFinalized(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev get the address of the corresponding L2 bridge contract.\\n     * @return Address of the corresponding L2 bridge contract.\\n     */\\n    function l2TokenBridge() external returns (address);\\n\\n    /**\\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _amount Amount of the ERC20 to deposit\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20To(\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external;\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ERC20 token.\\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\\n     *\\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Data provided by the sender on L2. This data is provided\\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *   length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeERC20Withdrawal(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x69f831896dcbb6bef4f2d6c8be6cd1bf352f5910074d3ce973b9f8e0a4f4c1dd\",\"license\":\"MIT\"},\"contracts/L1/messaging/IL1StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\nimport \\\"./IL1ERC20Bridge.sol\\\";\\n\\n/**\\n * @title IL1StandardBridge\\n */\\ninterface IL1StandardBridge is IL1ERC20Bridge {\\n    /**********\\n     * Events *\\n     **********/\\n    event ETHDepositInitiated(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ETHWithdrawalFinalized(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev Deposit an amount of the ETH to the caller's balance on L2.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable;\\n\\n    /**\\n     * @dev Deposit an amount of ETH to a recipient's balance on L2.\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositETHTo(\\n        address _to,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external payable;\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ETH token. Since only the xDomainMessenger can call this function, it will never be called\\n     * before the withdrawal is finalized.\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeETHWithdrawal(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d511f1bcea86aa88a9c41798926ea75b5b3f455c0377e63223a123a9e714ddc\",\"license\":\"MIT\"},\"contracts/L2/fee-token/TON_FeeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_PredeployAddresses } from \\\"../../libraries/constants/Lib_PredeployAddresses.sol\\\";\\n\\n/* Contract Imports */\\nimport { L2StandardBridge } from \\\"../messaging/L2StandardBridge.sol\\\";\\nimport { L2StandardERC20 } from \\\"../../standards/L2StandardERC20.sol\\\";\\nimport { OVM_GasPriceOracle } from \\\"../predeploys/OVM_GasPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/* Contract Imports */\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title TON_FeeVault\\n */\\ncontract TON_FeeVault {\\n    // TODO: define value of the constants\\n    using SafeERC20 for IERC20;\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // Minimum TON balance that can be withdrawn in a single withdrawal.\\n    // 150,000 TON\\n    uint256 public constant MIN_WITHDRAWAL_AMOUNT = 150000e18;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Owner address\\n    address private _owner;\\n\\n    // Address that will hold the fees once withdrawn. Dynamically initialized within l2geth.\\n    address public feeWallet;\\n\\n    // L2 Ton token address\\n    address public l2TonAddress;\\n\\n    // The maximum price ratio value of ETH and TON\\n    uint256 public maxPriceRatio = 5000;\\n\\n    // The minimum price ratio value of ETH and TON\\n    uint256 public minPriceRatio = 500;\\n\\n    // The price ratio of ETH and TON\\n    // This price ratio considers the saving percentage of using TON as the fee token\\n    uint256 public priceRatio;\\n\\n    // Gas price oracle address (OVM_GasPriceOracle)\\n    address public gasPriceOracleAddress = 0x420000000000000000000000000000000000000F;\\n\\n    // Record the wallet address that wants to use ton as fee token\\n    mapping(address => bool) public tonFeeTokenUsers;\\n\\n    // Price ratio without discount\\n    uint256 public marketPriceRatio;\\n\\n    /*************\\n     *  Events   *\\n     *************/\\n\\n    event TransferOwnership(address, address);\\n    event UpdatePriceRatio(address, uint256, uint256);\\n    event UpdateMaxPriceRatio(address, uint256);\\n    event UpdateMinPriceRatio(address, uint256);\\n    event UpdateGasPriceOracleAddress(address, address);\\n    event WithdrawTON(address, address);\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyNotInitialized() {\\n        require(address(feeWallet) == address(0), \\\"Contract has been initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /********************\\n     * Fall back Functions *\\n     ********************/\\n\\n    /**\\n     * Receive ETH\\n     */\\n    receive() external payable {}\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * transfer ownership\\n     * @param _newOwner new owner address\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit TransferOwnership(oldOwner, _newOwner);\\n    }\\n\\n    /**\\n     * Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * Initialize feeWallet and l2TonAddress.\\n     */\\n    function initialize(address payable _feeWallet, address _l2TonAddress)\\n        public\\n        onlyNotInitialized\\n    {\\n        require(_feeWallet != address(0) && _l2TonAddress != address(0));\\n        feeWallet = _feeWallet;\\n        l2TonAddress = _l2TonAddress;\\n\\n        // Initialize the parameters\\n        _owner = msg.sender;\\n        gasPriceOracleAddress = 0x420000000000000000000000000000000000000F;\\n        maxPriceRatio = 5000;\\n        priceRatio = 2000;\\n        minPriceRatio = 500;\\n        marketPriceRatio = 2000;\\n    }\\n\\n    /**\\n     * Update the price ratio of ETH and TON\\n     * @param _priceRatio the price ratio of ETH and TON\\n     * @param _marketPriceRatio tha market price ratio of ETH and TON\\n     */\\n    function updatePriceRatio(uint256 _priceRatio, uint256 _marketPriceRatio) public onlyOwner {\\n        require(_priceRatio <= maxPriceRatio && _priceRatio >= minPriceRatio);\\n        require(_marketPriceRatio <= maxPriceRatio && _marketPriceRatio >= minPriceRatio);\\n        priceRatio = _priceRatio;\\n        marketPriceRatio = _marketPriceRatio;\\n        emit UpdatePriceRatio(owner(), _priceRatio, _marketPriceRatio);\\n    }\\n\\n    /**\\n     * Update the maximum price ratio of ETH and TON\\n     * @param _maxPriceRatio the maximum price ratio of ETH and TON\\n     */\\n    function updateMaxPriceRatio(uint256 _maxPriceRatio) public onlyOwner {\\n        require(_maxPriceRatio >= minPriceRatio && _maxPriceRatio > 0);\\n        maxPriceRatio = _maxPriceRatio;\\n        emit UpdateMaxPriceRatio(owner(), _maxPriceRatio);\\n    }\\n\\n    /**\\n     * Update the minimum price ratio of ETH and TON\\n     * @param _minPriceRatio the minimum price ratio of ETH and TON\\n     */\\n    function updateMinPriceRatio(uint256 _minPriceRatio) public onlyOwner {\\n        require(_minPriceRatio <= maxPriceRatio && _minPriceRatio > 0);\\n        minPriceRatio = _minPriceRatio;\\n        emit UpdateMinPriceRatio(owner(), _minPriceRatio);\\n    }\\n\\n    /**\\n     * Update the gas oracle address\\n     * @param _gasPriceOracleAddress gas oracle address\\n     */\\n    function updateGasPriceOracleAddress(address _gasPriceOracleAddress) public onlyOwner {\\n        require(Address.isContract(_gasPriceOracleAddress), \\\"Account is EOA\\\");\\n        require(_gasPriceOracleAddress != address(0));\\n        gasPriceOracleAddress = _gasPriceOracleAddress;\\n        emit UpdateGasPriceOracleAddress(owner(), _gasPriceOracleAddress);\\n    }\\n\\n    /**\\n     * Get L1 Ton fee for fee estimation\\n     * @param _txData the data payload\\n     */\\n    function getL1TonFee(bytes memory _txData) public view returns (uint256) {\\n        OVM_GasPriceOracle gasPriceOracleContract = OVM_GasPriceOracle(gasPriceOracleAddress);\\n        return gasPriceOracleContract.getL1Fee(_txData) * priceRatio;\\n    }\\n\\n    /**\\n     * withdraw TON tokens to l1 fee wallet\\n     */\\n    function withdrawTON() public {\\n        // check L2 balance whether it is possible to withdraw\\n        require(\\n            L2StandardERC20(l2TonAddress).balanceOf(address(this)) >= MIN_WITHDRAWAL_AMOUNT,\\n            // solhint-disable-next-line max-line-length\\n            \\\"Ton_GasPriceOracle: withdrawal amount must be greater than minimum withdrawal amount\\\"\\n        );\\n        // send amount of TON balance to L1\\n        L2StandardBridge(Lib_PredeployAddresses.L2_STANDARD_BRIDGE).withdrawTo(\\n            l2TonAddress,\\n            feeWallet,\\n            L2StandardERC20(l2TonAddress).balanceOf(address(this)),\\n            0,\\n            bytes(\\\"\\\")\\n        );\\n        emit WithdrawTON(owner(), feeWallet);\\n    }\\n}\\n\",\"keccak256\":\"0x047cc1c443eec3754662ff07e7152d7d02524fa6d922ec45c495b7c917415e46\",\"license\":\"MIT\"},\"contracts/L2/messaging/IL2ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IL2ERC20Bridge\\n */\\ninterface IL2ERC20Bridge {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event WithdrawalInitiated(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event DepositFinalized(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event DepositFailed(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev get the address of the corresponding L1 bridge contract.\\n     * @return Address of the corresponding L1 bridge contract.\\n     */\\n    function l1TokenBridge() external returns (address);\\n\\n    /**\\n     * @dev initiate a withdraw of some tokens to the caller's account on L1\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _amount Amount of the token to withdraw.\\n     * param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function withdraw(\\n        address _l2Token,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev initiate a withdraw of some token to a recipient's account on L1.\\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\\n     * @param _to L1 adress to credit the withdrawal to.\\n     * @param _amount Amount of the token to withdraw.\\n     * param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function withdrawTo(\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external;\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * @dev Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this\\n     * L2 token. This call will fail if it did not originate from a corresponding deposit in\\n     * L1StandardTokenBridge.\\n     * @param _l1Token Address for the l1 token this is called with\\n     * @param _l2Token Address for the l2 token this is called with\\n     * @param _from Account to pull the deposit from on L2.\\n     * @param _to Address to receive the withdrawal at\\n     * @param _amount Amount of the token to withdraw\\n     * @param _data Data provider by the sender on L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeDeposit(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4674c3c8733ca0db16c2b81d58227560df36a07ded3b637a0793564d90ac0475\",\"license\":\"MIT\"},\"contracts/L2/messaging/L2StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Interface Imports */\\nimport { IL1StandardBridge } from \\\"../../L1/messaging/IL1StandardBridge.sol\\\";\\nimport { IL1ERC20Bridge } from \\\"../../L1/messaging/IL1ERC20Bridge.sol\\\";\\nimport { IL2ERC20Bridge } from \\\"./IL2ERC20Bridge.sol\\\";\\n\\n/* Library Imports */\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { CrossDomainEnabled } from \\\"../../libraries/bridge/CrossDomainEnabled.sol\\\";\\nimport { Lib_PredeployAddresses } from \\\"../../libraries/constants/Lib_PredeployAddresses.sol\\\";\\n\\n/* Contract Imports */\\nimport { IL2StandardERC20 } from \\\"../../standards/IL2StandardERC20.sol\\\";\\n\\n/**\\n * @title L2StandardBridge\\n * @dev The L2 Standard bridge is a contract which works together with the L1 Standard bridge to\\n * enable ETH and ERC20 transitions between L1 and L2.\\n * This contract acts as a minter for new tokens when it hears about deposits into the L1 Standard\\n * bridge.\\n * This contract also acts as a burner of the tokens intended for withdrawal, informing the L1\\n * bridge to release L1 funds.\\n */\\ncontract L2StandardBridge is IL2ERC20Bridge, CrossDomainEnabled {\\n    /********************************\\n     * External Contract References *\\n     ********************************/\\n\\n    address public l1TokenBridge;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.\\n     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.\\n     */\\n    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)\\n        CrossDomainEnabled(_l2CrossDomainMessenger)\\n    {\\n        l1TokenBridge = _l1TokenBridge;\\n    }\\n\\n    /***************\\n     * Withdrawing *\\n     ***************/\\n\\n    /**\\n     * @inheritdoc IL2ERC20Bridge\\n     */\\n    function withdraw(\\n        address _l2Token,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external virtual {\\n        _initiateWithdrawal(_l2Token, msg.sender, msg.sender, _amount, _l1Gas, _data);\\n    }\\n\\n    /**\\n     * @inheritdoc IL2ERC20Bridge\\n     */\\n    function withdrawTo(\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external virtual {\\n        _initiateWithdrawal(_l2Token, msg.sender, _to, _amount, _l1Gas, _data);\\n    }\\n\\n    /**\\n     * @dev Performs the logic for withdrawals by burning the token and informing\\n     *      the L1 token Gateway of the withdrawal.\\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\\n     * @param _from Account to pull the withdrawal from on L2.\\n     * @param _to Account to give the withdrawal to on L1.\\n     * @param _amount Amount of the token to withdraw.\\n     * @param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function _initiateWithdrawal(\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) internal {\\n        // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2\\n        // usage\\n        // slither-disable-next-line reentrancy-events\\n        IL2StandardERC20(_l2Token).burn(msg.sender, _amount);\\n\\n        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)\\n        // slither-disable-next-line reentrancy-events\\n        address l1Token = IL2StandardERC20(_l2Token).l1Token();\\n        bytes memory message;\\n\\n        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {\\n            message = abi.encodeWithSelector(\\n                IL1StandardBridge.finalizeETHWithdrawal.selector,\\n                _from,\\n                _to,\\n                _amount,\\n                _data\\n            );\\n        } else {\\n            message = abi.encodeWithSelector(\\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\\n                l1Token,\\n                _l2Token,\\n                _from,\\n                _to,\\n                _amount,\\n                _data\\n            );\\n        }\\n\\n        // Send message up to L1 bridge\\n        // slither-disable-next-line reentrancy-events\\n        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);\\n    }\\n\\n    /************************************\\n     * Cross-chain Function: Depositing *\\n     ************************************/\\n\\n    /**\\n     * @inheritdoc IL2ERC20Bridge\\n     */\\n    function finalizeDeposit(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {\\n        // Check the target token is compliant and\\n        // verify the deposited token on L1 matches the L2 deposited token representation here\\n        if (\\n            // slither-disable-next-line reentrancy-events\\n            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&\\n            _l1Token == IL2StandardERC20(_l2Token).l1Token()\\n        ) {\\n            // When a deposit is finalized, we credit the account on L2 with the same amount of\\n            // tokens.\\n            // slither-disable-next-line reentrancy-events\\n            IL2StandardERC20(_l2Token).mint(_to, _amount);\\n            // slither-disable-next-line reentrancy-events\\n            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);\\n        } else {\\n            // Either the L2 token which is being deposited-into disagrees about the correct address\\n            // of its L1 token, or does not support the correct interface.\\n            // This should only happen if there is a  malicious L2 token, or if a user somehow\\n            // specified the wrong L2 token address to deposit into.\\n            // In either case, we stop the process here and construct a withdrawal\\n            // message so that users can get their funds out in some cases.\\n            // There is no way to prevent malicious token contracts altogether, but this does limit\\n            // user error and mitigate some forms of malicious contract behavior.\\n            bytes memory message = abi.encodeWithSelector(\\n                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,\\n                _l1Token,\\n                _l2Token,\\n                _to, // switched the _to and _from here to bounce back the deposit to the sender\\n                _from,\\n                _amount,\\n                _data\\n            );\\n\\n            // Send message up to L1 bridge\\n            // slither-disable-next-line reentrancy-events\\n            sendCrossDomainMessage(l1TokenBridge, 0, message);\\n            // slither-disable-next-line reentrancy-events\\n            emit DepositFailed(_l1Token, _l2Token, _from, _to, _amount, _data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e175cdd629f7cdffb72d66a771b6495cddc1c98a166c79c1230bf605bd24daf\",\"license\":\"MIT\"},\"contracts/L2/predeploys/OVM_GasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* External Imports */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title OVM_GasPriceOracle\\n * @dev This contract exposes the current l2 gas price, a measure of how congested the network\\n * currently is. This measure is used by the Sequencer to determine what fee to charge for\\n * transactions. When the system is more congested, the l2 gas price will increase and fees\\n * will also increase as a result.\\n *\\n * All public variables are set while generating the initial L2 state. The\\n * constructor doesn't run in practice as the L2 state generation script uses\\n * the deployed bytecode instead of running the initcode.\\n */\\ncontract OVM_GasPriceOracle is Ownable {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Current L2 gas price\\n    uint256 public gasPrice;\\n    // Current L1 base fee\\n    uint256 public l1BaseFee;\\n    // Amortized cost of batch submission per transaction\\n    uint256 public overhead;\\n    // Value to scale the fee up by\\n    uint256 public scalar;\\n    // Number of decimals of the scalar\\n    uint256 public decimals;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _owner Address that will initially own this contract.\\n     */\\n    constructor(address _owner) Ownable() {\\n        transferOwnership(_owner);\\n    }\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event GasPriceUpdated(uint256);\\n    event L1BaseFeeUpdated(uint256);\\n    event OverheadUpdated(uint256);\\n    event ScalarUpdated(uint256);\\n    event DecimalsUpdated(uint256);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Allows the owner to modify the l2 gas price.\\n     * @param _gasPrice New l2 gas price.\\n     */\\n    // slither-disable-next-line external-function\\n    function setGasPrice(uint256 _gasPrice) public onlyOwner {\\n        gasPrice = _gasPrice;\\n        emit GasPriceUpdated(_gasPrice);\\n    }\\n\\n    /**\\n     * Allows the owner to modify the l1 base fee.\\n     * @param _baseFee New l1 base fee\\n     */\\n    // slither-disable-next-line external-function\\n    function setL1BaseFee(uint256 _baseFee) public onlyOwner {\\n        l1BaseFee = _baseFee;\\n        emit L1BaseFeeUpdated(_baseFee);\\n    }\\n\\n    /**\\n     * Allows the owner to modify the overhead.\\n     * @param _overhead New overhead\\n     */\\n    // slither-disable-next-line external-function\\n    function setOverhead(uint256 _overhead) public onlyOwner {\\n        overhead = _overhead;\\n        emit OverheadUpdated(_overhead);\\n    }\\n\\n    /**\\n     * Allows the owner to modify the scalar.\\n     * @param _scalar New scalar\\n     */\\n    // slither-disable-next-line external-function\\n    function setScalar(uint256 _scalar) public onlyOwner {\\n        scalar = _scalar;\\n        emit ScalarUpdated(_scalar);\\n    }\\n\\n    /**\\n     * Allows the owner to modify the decimals.\\n     * @param _decimals New decimals\\n     */\\n    // slither-disable-next-line external-function\\n    function setDecimals(uint256 _decimals) public onlyOwner {\\n        decimals = _decimals;\\n        emit DecimalsUpdated(_decimals);\\n    }\\n\\n    /**\\n     * Computes the L1 portion of the fee\\n     * based on the size of the RLP encoded tx\\n     * and the current l1BaseFee\\n     * @param _data Unsigned RLP encoded tx, 6 elements\\n     * @return L1 fee that should be paid for the tx\\n     */\\n    // slither-disable-next-line external-function\\n    function getL1Fee(bytes memory _data) public view returns (uint256) {\\n        uint256 l1GasUsed = getL1GasUsed(_data);\\n        uint256 l1Fee = l1GasUsed * l1BaseFee;\\n        uint256 divisor = 10**decimals;\\n        uint256 unscaled = l1Fee * scalar;\\n        uint256 scaled = unscaled / divisor;\\n        return scaled;\\n    }\\n\\n    // solhint-disable max-line-length\\n    /**\\n     * Computes the amount of L1 gas used for a transaction\\n     * The overhead represents the per batch gas overhead of\\n     * posting both transaction and state roots to L1 given larger\\n     * batch sizes.\\n     * 4 gas for 0 byte\\n     * https://github.com/ethereum/go-ethereum/blob/9ada4a2e2c415e6b0b51c50e901336872e028872/params/protocol_params.go#L33\\n     * 16 gas for non zero byte\\n     * https://github.com/ethereum/go-ethereum/blob/9ada4a2e2c415e6b0b51c50e901336872e028872/params/protocol_params.go#L87\\n     * This will need to be updated if calldata gas prices change\\n     * Account for the transaction being unsigned\\n     * Padding is added to account for lack of signature on transaction\\n     * 1 byte for RLP V prefix\\n     * 1 byte for V\\n     * 1 byte for RLP R prefix\\n     * 32 bytes for R\\n     * 1 byte for RLP S prefix\\n     * 32 bytes for S\\n     * Total: 68 bytes of padding\\n     * @param _data Unsigned RLP encoded tx, 6 elements\\n     * @return Amount of L1 gas used for a transaction\\n     */\\n    // solhint-enable max-line-length\\n    function getL1GasUsed(bytes memory _data) public view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < _data.length; i++) {\\n            if (_data[i] == 0) {\\n                total += 4;\\n            } else {\\n                total += 16;\\n            }\\n        }\\n        uint256 unsigned = total + overhead;\\n        return unsigned + (68 * 16);\\n    }\\n}\\n\",\"keccak256\":\"0x099a31c56047c45d4d74fb0cb1f71d2c7a9e8b7f3d2b58dd69050873722f7b01\",\"license\":\"MIT\"},\"contracts/libraries/bridge/CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/* Interface Imports */\\nimport { ICrossDomainMessenger } from \\\"./ICrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title CrossDomainEnabled\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n */\\ncontract CrossDomainEnabled {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Messenger contract used to send and recieve messages from the other domain.\\n    address public messenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\\n     */\\n    constructor(address _messenger) {\\n        messenger = _messenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is\\n     *  authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\\n        require(\\n            msg.sender == address(getCrossDomainMessenger()),\\n            \\\"OVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"OVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\\n     * needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used.\\n     */\\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\\n        return ICrossDomainMessenger(messenger);\\n    }\\n\\n    /**q\\n     * Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _message The data to send to the target (usually calldata to a function with\\n     *  `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        uint32 _gasLimit,\\n        bytes memory _message\\n    ) internal {\\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x9c3cc8b7047c68a403529b15769a21c2e2668ea71db7bef51f123288009811ea\",\"license\":\"MIT\"},\"contracts/libraries/bridge/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n    event RelayedFastMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce\\n    );\\n    event FailedRelayedFastMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce\\n    );\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57ab7014a2aaf4185b8d09bf923db58d2882eb9fe7ffb114ca6f984765d8f416\",\"license\":\"MIT\"},\"contracts/libraries/constants/Lib_PredeployAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_PredeployAddresses\\n */\\nlibrary Lib_PredeployAddresses {\\n    address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;\\n    address internal constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;\\n    address internal constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;\\n    address payable internal constant OVM_ETH = payable(0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000);\\n    address internal constant L2_CROSS_DOMAIN_MESSENGER =\\n        0x4200000000000000000000000000000000000007;\\n    address internal constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;\\n    address internal constant PROXY_EOA = 0x4200000000000000000000000000000000000009;\\n    address internal constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;\\n    address internal constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;\\n    address internal constant L2_STANDARD_TOKEN_FACTORY =\\n        0x4200000000000000000000000000000000000012;\\n    address internal constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;\\n}\\n\",\"keccak256\":\"0x2bc28307af93e9716151a41a81694b56cbe513ef5eb335fb1d81f35e5db8edfa\",\"license\":\"MIT\"},\"contracts/standards/IL2StandardERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IL2StandardERC20 is IERC20, IERC165 {\\n    function l1Token() external returns (address);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    event Mint(address indexed _account, uint256 _amount);\\n    event Burn(address indexed _account, uint256 _amount);\\n}\\n\",\"keccak256\":\"0xef4cf5b2335d7709c88f0d16f7fa9965e618a7572d47bb75bcdbebb88e96a21a\",\"license\":\"MIT\"},\"contracts/standards/L2StandardERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./IL2StandardERC20.sol\\\";\\n\\ncontract L2StandardERC20 is IL2StandardERC20, ERC20 {\\n    address public l1Token;\\n    address public l2Bridge;\\n\\n    /**\\n     * @param _l2Bridge Address of the L2 standard bridge.\\n     * @param _l1Token Address of the corresponding L1 token.\\n     * @param _name ERC20 name.\\n     * @param _symbol ERC20 symbol.\\n     */\\n    constructor(\\n        address _l2Bridge,\\n        address _l1Token,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        l1Token = _l1Token;\\n        l2Bridge = _l2Bridge;\\n    }\\n\\n    modifier onlyL2Bridge() {\\n        require(msg.sender == l2Bridge, \\\"Only L2 Bridge can mint and burn\\\");\\n        _;\\n    }\\n\\n    // slither-disable-next-line external-function\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        bytes4 firstSupportedInterface = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\")); // ERC165\\n        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^\\n            IL2StandardERC20.mint.selector ^\\n            IL2StandardERC20.burn.selector;\\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\\n    }\\n\\n    // slither-disable-next-line external-function\\n    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {\\n        _mint(_to, _amount);\\n\\n        emit Mint(_to, _amount);\\n    }\\n\\n    // slither-disable-next-line external-function\\n    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {\\n        _burn(_from, _amount);\\n\\n        emit Burn(_from, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x04f40271a8f839a2d6a9ad9f70dc639728d37ceaddeb95616f34b14eab14b879\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526113886003556101f4600455600680546001600160a01b03191673420000000000000000000000000000000000000f17905534801561004257600080fd5b506112b2806100526000396000f3fe60806040526004361061012c5760003560e01c8063bc9bd6ee116100a5578063d86732ef11610074578063f2fde38b11610059578063f2fde38b1461036d578063f3bae2df1461038d578063fa84d92f146103ba57600080fd5b8063d86732ef1461032a578063f25f4b561461034057600080fd5b8063bc9bd6ee146102b6578063c8a05413146102d6578063d2e1fb22146102f6578063d3e5792b1461030c57600080fd5b8063485cc955116100fc5780637728195c116100e15780637728195c146102195780638da5cb5b1461026b5780638fcfc8131461029657600080fd5b8063485cc955146101b95780635a791a12146101d957600080fd5b80625c5fb2146101385780630aa2f4201461015a57806315a0c1ac1461018357806341fb67c21461019957600080fd5b3661013357005b600080fd5b34801561014457600080fd5b50610158610153366004610f77565b6103cf565b005b34801561016657600080fd5b5061017060055481565b6040519081526020015b60405180910390f35b34801561018f57600080fd5b5061017060085481565b3480156101a557600080fd5b506101706101b4366004610fbf565b6104e7565b3480156101c557600080fd5b506101586101d43660046110b3565b6105a5565b3480156101e557600080fd5b506102096101f43660046110ec565b60076020526000908152604090205460ff1681565b604051901515815260200161017a565b34801561022557600080fd5b506006546102469073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161017a565b34801561027757600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610246565b3480156102a257600080fd5b506101586102b13660046110ec565b610700565b3480156102c257600080fd5b506101586102d1366004611109565b6108b7565b3480156102e257600080fd5b506101586102f1366004610f77565b6109f6565b34801561030257600080fd5b5061017060045481565b34801561031857600080fd5b50610170691fc3842bd1f071c0000081565b34801561033657600080fd5b5061017060035481565b34801561034c57600080fd5b506001546102469073ffffffffffffffffffffffffffffffffffffffff1681565b34801561037957600080fd5b506101586103883660046110ec565b610ad7565b34801561039957600080fd5b506002546102469073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103c657600080fd5b50610158610c7a565b60005473ffffffffffffffffffffffffffffffffffffffff163314610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b60035481111580156104675750600081115b61047057600080fd5b60048190557f680f379280fc8680df45c979a924c0084a250758604482cb01dadedbaa1c09c96104b560005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201849052015b60405180910390a150565b6006546005546040517f49948e0e00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff16919082906349948e0e90610544908790600401611196565b60206040518083038186803b15801561055c57600080fd5b505afa158015610570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059491906111a9565b61059e91906111c2565b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1615610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f436f6e747261637420686173206265656e20696e697469616c697a6564000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff82161580159061065f575073ffffffffffffffffffffffffffffffffffffffff811615155b61066857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600280549290931691811691909117909155600080548216331790556006805490911673420000000000000000000000000000000000000f1790556113886003556107d060058190556101f4600455600855565b60005473ffffffffffffffffffffffffffffffffffffffff163314610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b803b6107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e7420697320454f41000000000000000000000000000000000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff811661080957600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790557f226bf99888a1e70d41ce744b11ce2acd4d1d1b8cf4ad17a0e72e67acff4bf5a761088b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff92831681529184166020830152016104dc565b60005473ffffffffffffffffffffffffffffffffffffffff163314610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b600354821115801561094c57506004548210155b61095557600080fd5b600354811115801561096957506004548110155b61097257600080fd5b600582905560088190557f23632bbb735dece542dac9735a2ba4253234eb119ce45cdf9968cbbe12aa67906109bc60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682526020820185905281018390526060015b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b6004548110158015610a895750600081115b610a9257600080fd5b60038190557f7a28f69b71e51c4a30f620a2cfe4ce5aad2cd3fe5cc9647e400e252b65033d416104b560005473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff8116610bfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044c565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c91016109ea565b6002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152691fc3842bd1f071c000009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906111a9565b1015610dd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605460248201527f546f6e5f47617350726963654f7261636c653a207769746864726177616c206160448201527f6d6f756e74206d7573742062652067726561746572207468616e206d696e696d60648201527f756d207769746864726177616c20616d6f756e74000000000000000000000000608482015260a40161044c565b6002546001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527342000000000000000000000000000000000000109263a3a795489273ffffffffffffffffffffffffffffffffffffffff9182169291169082906370a082319060240160206040518083038186803b158015610e6657600080fd5b505afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e91906111a9565b6000604051806020016040528060008152506040518663ffffffff1660e01b8152600401610ed0959493929190611226565b600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b505050507f136a4c9d78f320da91698e7c77773d4ceed7aa70a4cf814632122d28743170fd610f4260005473ffffffffffffffffffffffffffffffffffffffff1690565b6001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a1565b600060208284031215610f8957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610fd157600080fd5b813567ffffffffffffffff80821115610fe957600080fd5b818401915084601f830112610ffd57600080fd5b81358181111561100f5761100f610f90565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561105557611055610f90565b8160405282815287602084870101111561106e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146110b057600080fd5b50565b600080604083850312156110c657600080fd5b82356110d18161108e565b915060208301356110e18161108e565b809150509250929050565b6000602082840312156110fe57600080fd5b813561059e8161108e565b6000806040838503121561111c57600080fd5b50508035926020909101359150565b6000815180845260005b8181101561115157602081850181015186830182015201611135565b81811115611163576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061059e602083018461112b565b6000602082840312156111bb57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611221577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015263ffffffff8416606083015260a0608083015261127160a083018461112b565b97965050505050505056fea2646970667358221220136a379c91d36c1e8e53cd64b053a51418c702be80c3a6b20cb91670d7c9d27764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061012c5760003560e01c8063bc9bd6ee116100a5578063d86732ef11610074578063f2fde38b11610059578063f2fde38b1461036d578063f3bae2df1461038d578063fa84d92f146103ba57600080fd5b8063d86732ef1461032a578063f25f4b561461034057600080fd5b8063bc9bd6ee146102b6578063c8a05413146102d6578063d2e1fb22146102f6578063d3e5792b1461030c57600080fd5b8063485cc955116100fc5780637728195c116100e15780637728195c146102195780638da5cb5b1461026b5780638fcfc8131461029657600080fd5b8063485cc955146101b95780635a791a12146101d957600080fd5b80625c5fb2146101385780630aa2f4201461015a57806315a0c1ac1461018357806341fb67c21461019957600080fd5b3661013357005b600080fd5b34801561014457600080fd5b50610158610153366004610f77565b6103cf565b005b34801561016657600080fd5b5061017060055481565b6040519081526020015b60405180910390f35b34801561018f57600080fd5b5061017060085481565b3480156101a557600080fd5b506101706101b4366004610fbf565b6104e7565b3480156101c557600080fd5b506101586101d43660046110b3565b6105a5565b3480156101e557600080fd5b506102096101f43660046110ec565b60076020526000908152604090205460ff1681565b604051901515815260200161017a565b34801561022557600080fd5b506006546102469073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161017a565b34801561027757600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610246565b3480156102a257600080fd5b506101586102b13660046110ec565b610700565b3480156102c257600080fd5b506101586102d1366004611109565b6108b7565b3480156102e257600080fd5b506101586102f1366004610f77565b6109f6565b34801561030257600080fd5b5061017060045481565b34801561031857600080fd5b50610170691fc3842bd1f071c0000081565b34801561033657600080fd5b5061017060035481565b34801561034c57600080fd5b506001546102469073ffffffffffffffffffffffffffffffffffffffff1681565b34801561037957600080fd5b506101586103883660046110ec565b610ad7565b34801561039957600080fd5b506002546102469073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103c657600080fd5b50610158610c7a565b60005473ffffffffffffffffffffffffffffffffffffffff163314610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e657200000000000000000060448201526064015b60405180910390fd5b60035481111580156104675750600081115b61047057600080fd5b60048190557f680f379280fc8680df45c979a924c0084a250758604482cb01dadedbaa1c09c96104b560005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208201849052015b60405180910390a150565b6006546005546040517f49948e0e00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff16919082906349948e0e90610544908790600401611196565b60206040518083038186803b15801561055c57600080fd5b505afa158015610570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059491906111a9565b61059e91906111c2565b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1615610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f436f6e747261637420686173206265656e20696e697469616c697a6564000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff82161580159061065f575073ffffffffffffffffffffffffffffffffffffffff811615155b61066857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600280549290931691811691909117909155600080548216331790556006805490911673420000000000000000000000000000000000000f1790556113886003556107d060058190556101f4600455600855565b60005473ffffffffffffffffffffffffffffffffffffffff163314610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b803b6107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e7420697320454f41000000000000000000000000000000000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff811661080957600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790557f226bf99888a1e70d41ce744b11ce2acd4d1d1b8cf4ad17a0e72e67acff4bf5a761088b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff92831681529184166020830152016104dc565b60005473ffffffffffffffffffffffffffffffffffffffff163314610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b600354821115801561094c57506004548210155b61095557600080fd5b600354811115801561096957506004548110155b61097257600080fd5b600582905560088190557f23632bbb735dece542dac9735a2ba4253234eb119ce45cdf9968cbbe12aa67906109bc60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805173ffffffffffffffffffffffffffffffffffffffff90921682526020820185905281018390526060015b60405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b6004548110158015610a895750600081115b610a9257600080fd5b60038190557f7a28f69b71e51c4a30f620a2cfe4ce5aad2cd3fe5cc9647e400e252b65033d416104b560005473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161044c565b73ffffffffffffffffffffffffffffffffffffffff8116610bfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044c565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c91016109ea565b6002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152691fc3842bd1f071c000009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610ced57600080fd5b505afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2591906111a9565b1015610dd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605460248201527f546f6e5f47617350726963654f7261636c653a207769746864726177616c206160448201527f6d6f756e74206d7573742062652067726561746572207468616e206d696e696d60648201527f756d207769746864726177616c20616d6f756e74000000000000000000000000608482015260a40161044c565b6002546001546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527342000000000000000000000000000000000000109263a3a795489273ffffffffffffffffffffffffffffffffffffffff9182169291169082906370a082319060240160206040518083038186803b158015610e6657600080fd5b505afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e91906111a9565b6000604051806020016040528060008152506040518663ffffffff1660e01b8152600401610ed0959493929190611226565b600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b505050507f136a4c9d78f320da91698e7c77773d4ceed7aa70a4cf814632122d28743170fd610f4260005473ffffffffffffffffffffffffffffffffffffffff1690565b6001546040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a1565b600060208284031215610f8957600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610fd157600080fd5b813567ffffffffffffffff80821115610fe957600080fd5b818401915084601f830112610ffd57600080fd5b81358181111561100f5761100f610f90565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561105557611055610f90565b8160405282815287602084870101111561106e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146110b057600080fd5b50565b600080604083850312156110c657600080fd5b82356110d18161108e565b915060208301356110e18161108e565b809150509250929050565b6000602082840312156110fe57600080fd5b813561059e8161108e565b6000806040838503121561111c57600080fd5b50508035926020909101359150565b6000815180845260005b8181101561115157602081850181015186830182015201611135565b81811115611163576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061059e602083018461112b565b6000602082840312156111bb57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611221577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500290565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015263ffffffff8416606083015260a0608083015261127160a083018461112b565b97965050505050505056fea2646970667358221220136a379c91d36c1e8e53cd64b053a51418c702be80c3a6b20cb91670d7c9d27764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getL1TonFee(bytes)": {
        "params": {
          "_txData": "the data payload"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "new owner address"
        }
      },
      "updateGasPriceOracleAddress(address)": {
        "params": {
          "_gasPriceOracleAddress": "gas oracle address"
        }
      },
      "updateMaxPriceRatio(uint256)": {
        "params": {
          "_maxPriceRatio": "the maximum price ratio of ETH and TON"
        }
      },
      "updateMinPriceRatio(uint256)": {
        "params": {
          "_minPriceRatio": "the minimum price ratio of ETH and TON"
        }
      },
      "updatePriceRatio(uint256,uint256)": {
        "params": {
          "_marketPriceRatio": "tha market price ratio of ETH and TON",
          "_priceRatio": "the price ratio of ETH and TON"
        }
      }
    },
    "title": "TON_FeeVault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getL1TonFee(bytes)": {
        "notice": "Get L1 Ton fee for fee estimation"
      },
      "initialize(address,address)": {
        "notice": "Initialize feeWallet and l2TonAddress."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "notice": "transfer ownership"
      },
      "updateGasPriceOracleAddress(address)": {
        "notice": "Update the gas oracle address"
      },
      "updateMaxPriceRatio(uint256)": {
        "notice": "Update the maximum price ratio of ETH and TON"
      },
      "updateMinPriceRatio(uint256)": {
        "notice": "Update the minimum price ratio of ETH and TON"
      },
      "updatePriceRatio(uint256,uint256)": {
        "notice": "Update the price ratio of ETH and TON"
      },
      "withdrawTON()": {
        "notice": "withdraw TON tokens to l1 fee wallet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6731,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6733,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "feeWallet",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6735,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "l2TonAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6738,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "maxPriceRatio",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6741,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "minPriceRatio",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6743,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "priceRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6746,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "gasPriceOracleAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6750,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "tonFeeTokenUsers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6752,
        "contract": "contracts/L2/fee-token/TON_FeeVault.sol:TON_FeeVault",
        "label": "marketPriceRatio",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}